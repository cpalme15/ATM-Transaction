	/*Programmers:Collin Palmer, Zachariah Pelletier
 * 10/11/16
 * COSC 111
 * Purpose: To take account information from a file and do the math to evaluate their ending account 
 * balance based on the transaction type they ask for, as well as print this information to a separate file
 *  in the desired format.
 * 
 */



	import java.text.NumberFormat;
    import java.io.*;
	import java.util.*;

		public class ATM {
	

		public static void main(String[] args) {
			NumberFormat defaultFormat = NumberFormat.getCurrencyInstance();
				File f = null;
				File fo=null;
				PrintWriter fout=null;
				Scanner k=null;
				String fname="";
				String lname="";
				double beforebal=0.0;
				double afterbal=0.0;
				char transtype=' ';
				int amount=0;
				f= new File ("transactions.txt");
				fo=new File("statement.txt");
				final double minbal = 300.0;
					try {
						k=new Scanner(f);
						fout= new PrintWriter(fo);
						} 
					catch (FileNotFoundException e) {
		
						e.printStackTrace();
						}
    
      
      
      
			while(k.hasNext()){
				fname=k.next();
				lname=k.next();
		        beforebal=k.nextDouble();
				transtype=k.next().charAt(0);
				amount=k.nextInt();
          
				fout.println(lname+" "+fname);
				fout.println("Checking balance before transaction: "+ defaultFormat.format(beforebal));
				fout.println("Transaction Type: "+transtype);
		   switch(transtype){
      
		   		case 'W':
		   			{
		   				if(beforebal<0)
		   				{
		   					afterbal=beforebal;
		   					fout.println("Transaction Amount: "+ defaultFormat.format(amount));
		   					fout.println("Check balance after transaction: "+ defaultFormat.format(afterbal));
		   					fout.println("Error:You have a negative amount in your"
		   					+ " account cannot withdraw any funds");
		   				}
		   				else if (amount>beforebal)
		   				{
		   					afterbal=beforebal;
		   					fout.println("Transaction Amount: "+ defaultFormat.format(amount));
		   					fout.println("Check balance after transaction: "+ defaultFormat.format(afterbal));
		   					fout.println("Error:You can not take out more than you have");
    		 
		   				}
		   				else if(amount<0)
		   				{
		   					afterbal=beforebal;
		   					fout.println("Transaction Amount:"+defaultFormat.format(amount));
		   					fout.println("Check balance after transaction: "+ defaultFormat.format(afterbal));
		   					fout.println("Error:You can not subtract negative"
		   					+ " funds to your account");
		   				}
		   				else 
		   				{
    		  
		   					afterbal=(beforebal-amount);
		   					fout.println("Transaction Amount: "+ defaultFormat.format(amount));
		   					fout.println("Check balance after transaction: "+ defaultFormat.format(afterbal));
		   					
		   					if(afterbal<minbal){
		   				    fout.println("Warning: Your account balance is below the $300"
		   				    + " minimum balance limit");}
		   			   else
		   			       fout.println("Transaction Amount: "+ defaultFormat.format(amount));
		   				   afterbal=(beforebal-amount);
		   					}
		   				}
		   			break;
    	 

		   case 'D':
		   	if(amount<0)
    	  {
    		  afterbal=beforebal;
    		  fout.println("Transaction Amount: "+ defaultFormat.format(amount));
    		  fout.println("Check balance after transaction: "+ defaultFormat.format(afterbal));
    		  fout.println("Error: You can not add negative "
    	  	  + "funds to your account");
    	  }
    	  	else
    	  {
    		  afterbal=beforebal+amount;
    		  fout.println("Transaction Amount: "+ defaultFormat.format(amount));
        	  fout.println("Check balance after transaction: "+defaultFormat.format(afterbal));
    	  }
    	  
    	  	break;
    	  
      		case 'R':
      			fout.println("Transaction Amount: "+ defaultFormat.format(amount));
      			fout.println("Checking current balance: "+ defaultFormat.format(beforebal));
      		break;
    	  
      		default:
         { 
        	 afterbal=beforebal;
        	 fout.println("Transaction Amount: "+ defaultFormat.format(amount));
        	 fout.println("Checking balance after transaction: "+ defaultFormat.format(afterbal));
        	 fout.println("Error:Invalid transaction type");
        	 break;
        	 }
		   	}
      
		   fout.println("============================"
		   		+ "=========================================");
			}
      
			k.close();
			fout.close();
			} 
		}
